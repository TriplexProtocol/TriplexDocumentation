{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file:///Users/gz/Documents/GitHub/TriplexDocumentation/app/_components/example-dynamic-markdown-import.tsx"],"sourcesContent":["'use client'\n\nimport dynamic from 'next/dynamic'\nimport { useState } from 'react'\n\nexport function ExampleDynamicMarkdownImport() {\n  const [pageOne, setPageOne] = useState(true)\n  const Page = dynamic(\n    () => {\n      if (pageOne) {\n        return import('../../content/en/docs/advanced/more/tree/one.mdx')\n      }\n      return import('../../content/en/docs/advanced/more/tree/two.mdx')\n    },\n    { loading: () => <p>Loading...</p> }\n  )\n  return (\n    <>\n      <Page />\n      <button onClick={() => setPageOne(!pageOne)}>Toggle Content</button>\n    </>\n  )\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;;AAHA;;;;AAKO,SAAS;IACd,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,uWAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,OAAO,CAAA,GAAA,iUAAA,CAAA,UAAO,AAAD,EACjB;QACE,IAAI,SAAS;YACX;QACF;QACA;IACF;;;;;;QACE,SAAS,kBAAM,gZAAC;0BAAE;;;;;;;IAEtB,qBACE;;0BACE,gZAAC;;;;;0BACD,gZAAC;gBAAO,SAAS,IAAM,WAAW,CAAC;0BAAU;;;;;;;;AAGnD","debugId":null}},
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file:///Users/gz/Documents/GitHub/TriplexDocumentation/app/_components/video.tsx"],"sourcesContent":["'use client'\n\nimport type { FC, ReactNode } from 'react'\nimport { useCallback, useEffect, useRef } from 'react'\nimport { useInView } from 'react-intersection-observer'\n\nexport const Video: FC<{ src: string; caption?: ReactNode; ratio: number }> = ({\n  src,\n  caption,\n  ratio\n}) => {\n  const [inViewRef, inView] = useInView({ threshold: 1 })\n  const videoRef = useRef<HTMLVideoElement>(null)\n\n  const setRefs = useCallback(\n    // @ts-expect-error -- fixme\n    node => {\n      // Ref's from useRef needs to have the node assigned to `current`\n      videoRef.current = node\n      // Callback refs, like the one from `useInView`, is a function that takes the node as an argument\n      inViewRef(node)\n\n      node.addEventListener('click', function (this: HTMLVideoElement) {\n        if (this.paused) {\n          this.play()\n        } else {\n          this.pause()\n        }\n      })\n    },\n    [inViewRef]\n  )\n\n  useEffect(() => {\n    if (!videoRef.current) {\n      return\n    }\n\n    if (inView) {\n      videoRef.current.play()\n    } else {\n      videoRef.current.pause()\n    }\n  }, [inView])\n\n  return (\n    <div style={{ position: 'relative', margin: '2rem 1rem' }}>\n      <div style={{ paddingBottom: ratio * 100 + '%' }} />\n      <video\n        style={{ position: 'absolute', top: 0, left: 0 }}\n        loop\n        muted\n        autoPlay\n        playsInline\n        ref={setRefs}\n      >\n        <source src={src} type=\"video/mp4\" />\n      </video>\n      {caption && (\n        <figcaption style={{ fontSize: '.9rem', textAlign: 'center' }}>\n          {caption}\n        </figcaption>\n      )}\n    </div>\n  )\n}\n"],"names":[],"mappings":";;;;AAGA;AACA;AAJA;;;;AAMO,MAAM,QAAiE,CAAC,EAC7E,GAAG,EACH,OAAO,EACP,KAAK,EACN;IACC,MAAM,CAAC,WAAW,OAAO,GAAG,CAAA,GAAA,gSAAA,CAAA,YAAS,AAAD,EAAE;QAAE,WAAW;IAAE;IACrD,MAAM,WAAW,CAAA,GAAA,uWAAA,CAAA,SAAM,AAAD,EAAoB;IAE1C,MAAM,UAAU,CAAA,GAAA,uWAAA,CAAA,cAAW,AAAD,EACxB,4BAA4B;IAC5B,CAAA;QACE,iEAAiE;QACjE,SAAS,OAAO,GAAG;QACnB,iGAAiG;QACjG,UAAU;QAEV,KAAK,gBAAgB,CAAC,SAAS;YAC7B,IAAI,IAAI,CAAC,MAAM,EAAE;gBACf,IAAI,CAAC,IAAI;YACX,OAAO;gBACL,IAAI,CAAC,KAAK;YACZ;QACF;IACF,GACA;QAAC;KAAU;IAGb,CAAA,GAAA,uWAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,CAAC,SAAS,OAAO,EAAE;YACrB;QACF;QAEA,IAAI,QAAQ;YACV,SAAS,OAAO,CAAC,IAAI;QACvB,OAAO;YACL,SAAS,OAAO,CAAC,KAAK;QACxB;IACF,GAAG;QAAC;KAAO;IAEX,qBACE,gZAAC;QAAI,OAAO;YAAE,UAAU;YAAY,QAAQ;QAAY;;0BACtD,gZAAC;gBAAI,OAAO;oBAAE,eAAe,QAAQ,MAAM;gBAAI;;;;;;0BAC/C,gZAAC;gBACC,OAAO;oBAAE,UAAU;oBAAY,KAAK;oBAAG,MAAM;gBAAE;gBAC/C,IAAI;gBACJ,KAAK;gBACL,QAAQ;gBACR,WAAW;gBACX,KAAK;0BAEL,cAAA,gZAAC;oBAAO,KAAK;oBAAK,MAAK;;;;;;;;;;;YAExB,yBACC,gZAAC;gBAAW,OAAO;oBAAE,UAAU;oBAAS,WAAW;gBAAS;0BACzD;;;;;;;;;;;;AAKX","debugId":null}}]
}